/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 897.0, "minX": 0.0, "maxY": 17403.0, "series": [{"data": [[0.0, 897.0], [0.1, 897.0], [0.2, 899.0], [0.3, 900.0], [0.4, 903.0], [0.5, 903.0], [0.6, 904.0], [0.7, 906.0], [0.8, 907.0], [0.9, 907.0], [1.0, 909.0], [1.1, 909.0], [1.2, 910.0], [1.3, 912.0], [1.4, 912.0], [1.5, 912.0], [1.6, 918.0], [1.7, 919.0], [1.8, 919.0], [1.9, 924.0], [2.0, 925.0], [2.1, 926.0], [2.2, 938.0], [2.3, 940.0], [2.4, 941.0], [2.5, 944.0], [2.6, 948.0], [2.7, 948.0], [2.8, 951.0], [2.9, 952.0], [3.0, 952.0], [3.1, 952.0], [3.2, 953.0], [3.3, 954.0], [3.4, 955.0], [3.5, 955.0], [3.6, 956.0], [3.7, 957.0], [3.8, 958.0], [3.9, 959.0], [4.0, 959.0], [4.1, 960.0], [4.2, 967.0], [4.3, 969.0], [4.4, 973.0], [4.5, 975.0], [4.6, 980.0], [4.7, 981.0], [4.8, 991.0], [4.9, 1024.0], [5.0, 1054.0], [5.1, 1055.0], [5.2, 1057.0], [5.3, 1066.0], [5.4, 1071.0], [5.5, 1073.0], [5.6, 1073.0], [5.7, 1073.0], [5.8, 1075.0], [5.9, 1077.0], [6.0, 1078.0], [6.1, 1081.0], [6.2, 1083.0], [6.3, 1086.0], [6.4, 1087.0], [6.5, 1088.0], [6.6, 1091.0], [6.7, 1116.0], [6.8, 1124.0], [6.9, 1125.0], [7.0, 1127.0], [7.1, 1131.0], [7.2, 1131.0], [7.3, 1133.0], [7.4, 1137.0], [7.5, 1144.0], [7.6, 1145.0], [7.7, 1145.0], [7.8, 1145.0], [7.9, 1145.0], [8.0, 1146.0], [8.1, 1148.0], [8.2, 1150.0], [8.3, 1151.0], [8.4, 1152.0], [8.5, 1152.0], [8.6, 1152.0], [8.7, 1153.0], [8.8, 1153.0], [8.9, 1153.0], [9.0, 1153.0], [9.1, 1156.0], [9.2, 1159.0], [9.3, 1160.0], [9.4, 1165.0], [9.5, 1169.0], [9.6, 1172.0], [9.7, 1177.0], [9.8, 1199.0], [9.9, 1201.0], [10.0, 1206.0], [10.1, 1207.0], [10.2, 1213.0], [10.3, 1213.0], [10.4, 1215.0], [10.5, 1217.0], [10.6, 1218.0], [10.7, 1220.0], [10.8, 1222.0], [10.9, 1223.0], [11.0, 1224.0], [11.1, 1224.0], [11.2, 1231.0], [11.3, 1231.0], [11.4, 1233.0], [11.5, 1236.0], [11.6, 1237.0], [11.7, 1238.0], [11.8, 1242.0], [11.9, 1244.0], [12.0, 1245.0], [12.1, 1245.0], [12.2, 1247.0], [12.3, 1248.0], [12.4, 1248.0], [12.5, 1249.0], [12.6, 1250.0], [12.7, 1250.0], [12.8, 1250.0], [12.9, 1251.0], [13.0, 1260.0], [13.1, 1261.0], [13.2, 1262.0], [13.3, 1265.0], [13.4, 1265.0], [13.5, 1268.0], [13.6, 1268.0], [13.7, 1278.0], [13.8, 1285.0], [13.9, 1285.0], [14.0, 1286.0], [14.1, 1286.0], [14.2, 1289.0], [14.3, 1295.0], [14.4, 1298.0], [14.5, 1302.0], [14.6, 1303.0], [14.7, 1303.0], [14.8, 1304.0], [14.9, 1304.0], [15.0, 1304.0], [15.1, 1306.0], [15.2, 1306.0], [15.3, 1316.0], [15.4, 1324.0], [15.5, 1325.0], [15.6, 1328.0], [15.7, 1332.0], [15.8, 1333.0], [15.9, 1335.0], [16.0, 1338.0], [16.1, 1338.0], [16.2, 1339.0], [16.3, 1341.0], [16.4, 1342.0], [16.5, 1344.0], [16.6, 1345.0], [16.7, 1347.0], [16.8, 1360.0], [16.9, 1363.0], [17.0, 1368.0], [17.1, 1371.0], [17.2, 1375.0], [17.3, 1376.0], [17.4, 1381.0], [17.5, 1382.0], [17.6, 1384.0], [17.7, 1385.0], [17.8, 1388.0], [17.9, 1390.0], [18.0, 1391.0], [18.1, 1392.0], [18.2, 1392.0], [18.3, 1393.0], [18.4, 1394.0], [18.5, 1394.0], [18.6, 1395.0], [18.7, 1400.0], [18.8, 1400.0], [18.9, 1402.0], [19.0, 1403.0], [19.1, 1404.0], [19.2, 1405.0], [19.3, 1406.0], [19.4, 1407.0], [19.5, 1409.0], [19.6, 1414.0], [19.7, 1424.0], [19.8, 1424.0], [19.9, 1428.0], [20.0, 1428.0], [20.1, 1429.0], [20.2, 1432.0], [20.3, 1447.0], [20.4, 1454.0], [20.5, 1455.0], [20.6, 1458.0], [20.7, 1465.0], [20.8, 1468.0], [20.9, 1470.0], [21.0, 1481.0], [21.1, 1481.0], [21.2, 1481.0], [21.3, 1485.0], [21.4, 1492.0], [21.5, 1495.0], [21.6, 1507.0], [21.7, 1511.0], [21.8, 1523.0], [21.9, 1525.0], [22.0, 1533.0], [22.1, 1540.0], [22.2, 1556.0], [22.3, 1559.0], [22.4, 1565.0], [22.5, 1588.0], [22.6, 1596.0], [22.7, 1605.0], [22.8, 1616.0], [22.9, 1629.0], [23.0, 1639.0], [23.1, 1648.0], [23.2, 1654.0], [23.3, 1670.0], [23.4, 1730.0], [23.5, 1750.0], [23.6, 1766.0], [23.7, 1778.0], [23.8, 1796.0], [23.9, 1844.0], [24.0, 1857.0], [24.1, 1885.0], [24.2, 1913.0], [24.3, 2086.0], [24.4, 2123.0], [24.5, 2131.0], [24.6, 2163.0], [24.7, 2165.0], [24.8, 2168.0], [24.9, 2170.0], [25.0, 2170.0], [25.1, 2171.0], [25.2, 2180.0], [25.3, 2206.0], [25.4, 2210.0], [25.5, 2213.0], [25.6, 2218.0], [25.7, 2227.0], [25.8, 2229.0], [25.9, 2230.0], [26.0, 2243.0], [26.1, 2272.0], [26.2, 2279.0], [26.3, 2285.0], [26.4, 2291.0], [26.5, 2294.0], [26.6, 2295.0], [26.7, 2301.0], [26.8, 2322.0], [26.9, 2333.0], [27.0, 2339.0], [27.1, 2348.0], [27.2, 2361.0], [27.3, 2401.0], [27.4, 2406.0], [27.5, 2413.0], [27.6, 2419.0], [27.7, 2433.0], [27.8, 2438.0], [27.9, 2446.0], [28.0, 2447.0], [28.1, 2447.0], [28.2, 2454.0], [28.3, 2465.0], [28.4, 2475.0], [28.5, 2480.0], [28.6, 2494.0], [28.7, 2520.0], [28.8, 2521.0], [28.9, 2527.0], [29.0, 2535.0], [29.1, 2549.0], [29.2, 2555.0], [29.3, 2565.0], [29.4, 2568.0], [29.5, 2570.0], [29.6, 2582.0], [29.7, 2586.0], [29.8, 2587.0], [29.9, 2595.0], [30.0, 2599.0], [30.1, 2609.0], [30.2, 2610.0], [30.3, 2624.0], [30.4, 2639.0], [30.5, 2646.0], [30.6, 2647.0], [30.7, 2647.0], [30.8, 2663.0], [30.9, 2666.0], [31.0, 2669.0], [31.1, 2714.0], [31.2, 2943.0], [31.3, 3016.0], [31.4, 3041.0], [31.5, 3065.0], [31.6, 3110.0], [31.7, 3114.0], [31.8, 3131.0], [31.9, 3140.0], [32.0, 3141.0], [32.1, 3155.0], [32.2, 3158.0], [32.3, 3160.0], [32.4, 3162.0], [32.5, 3162.0], [32.6, 3168.0], [32.7, 3177.0], [32.8, 3185.0], [32.9, 3195.0], [33.0, 3203.0], [33.1, 3204.0], [33.2, 3219.0], [33.3, 3220.0], [33.4, 3237.0], [33.5, 3239.0], [33.6, 3240.0], [33.7, 3257.0], [33.8, 3260.0], [33.9, 3267.0], [34.0, 3267.0], [34.1, 3267.0], [34.2, 3273.0], [34.3, 3274.0], [34.4, 3289.0], [34.5, 3292.0], [34.6, 3303.0], [34.7, 3330.0], [34.8, 3402.0], [34.9, 3418.0], [35.0, 3437.0], [35.1, 3438.0], [35.2, 3438.0], [35.3, 3449.0], [35.4, 3452.0], [35.5, 3462.0], [35.6, 3463.0], [35.7, 3463.0], [35.8, 3481.0], [35.9, 3487.0], [36.0, 3498.0], [36.1, 3510.0], [36.2, 3518.0], [36.3, 3536.0], [36.4, 3550.0], [36.5, 3550.0], [36.6, 3578.0], [36.7, 3600.0], [36.8, 3606.0], [36.9, 3612.0], [37.0, 3615.0], [37.1, 3650.0], [37.2, 3667.0], [37.3, 3682.0], [37.4, 3682.0], [37.5, 3684.0], [37.6, 3685.0], [37.7, 3686.0], [37.8, 3689.0], [37.9, 3711.0], [38.0, 3721.0], [38.1, 3722.0], [38.2, 3741.0], [38.3, 3743.0], [38.4, 3744.0], [38.5, 3747.0], [38.6, 3753.0], [38.7, 3755.0], [38.8, 3756.0], [38.9, 3756.0], [39.0, 3762.0], [39.1, 3764.0], [39.2, 3765.0], [39.3, 3774.0], [39.4, 3775.0], [39.5, 3779.0], [39.6, 3787.0], [39.7, 3791.0], [39.8, 3792.0], [39.9, 3792.0], [40.0, 3815.0], [40.1, 3826.0], [40.2, 3862.0], [40.3, 3882.0], [40.4, 3907.0], [40.5, 3929.0], [40.6, 3953.0], [40.7, 3965.0], [40.8, 3975.0], [40.9, 3978.0], [41.0, 3997.0], [41.1, 4029.0], [41.2, 4030.0], [41.3, 4040.0], [41.4, 4046.0], [41.5, 4057.0], [41.6, 4062.0], [41.7, 4068.0], [41.8, 4073.0], [41.9, 4076.0], [42.0, 4103.0], [42.1, 4131.0], [42.2, 4177.0], [42.3, 4179.0], [42.4, 4194.0], [42.5, 4206.0], [42.6, 4210.0], [42.7, 4218.0], [42.8, 4222.0], [42.9, 4234.0], [43.0, 4235.0], [43.1, 4272.0], [43.2, 4272.0], [43.3, 4274.0], [43.4, 4307.0], [43.5, 4316.0], [43.6, 4316.0], [43.7, 4317.0], [43.8, 4351.0], [43.9, 4356.0], [44.0, 4357.0], [44.1, 4385.0], [44.2, 4404.0], [44.3, 4420.0], [44.4, 4438.0], [44.5, 4453.0], [44.6, 4457.0], [44.7, 4501.0], [44.8, 4506.0], [44.9, 4512.0], [45.0, 4542.0], [45.1, 4557.0], [45.2, 4560.0], [45.3, 4577.0], [45.4, 4579.0], [45.5, 4603.0], [45.6, 4625.0], [45.7, 4636.0], [45.8, 4654.0], [45.9, 4662.0], [46.0, 4670.0], [46.1, 4687.0], [46.2, 4705.0], [46.3, 4716.0], [46.4, 4720.0], [46.5, 4726.0], [46.6, 4745.0], [46.7, 4826.0], [46.8, 4861.0], [46.9, 4876.0], [47.0, 4883.0], [47.1, 4885.0], [47.2, 4896.0], [47.3, 4920.0], [47.4, 4947.0], [47.5, 4953.0], [47.6, 4975.0], [47.7, 4993.0], [47.8, 5022.0], [47.9, 5048.0], [48.0, 5091.0], [48.1, 5103.0], [48.2, 5121.0], [48.3, 5128.0], [48.4, 5153.0], [48.5, 5155.0], [48.6, 5262.0], [48.7, 5271.0], [48.8, 5283.0], [48.9, 5299.0], [49.0, 5302.0], [49.1, 5305.0], [49.2, 5327.0], [49.3, 5332.0], [49.4, 5350.0], [49.5, 5355.0], [49.6, 5373.0], [49.7, 5379.0], [49.8, 5416.0], [49.9, 5425.0], [50.0, 5425.0], [50.1, 5437.0], [50.2, 5440.0], [50.3, 5440.0], [50.4, 5446.0], [50.5, 5451.0], [50.6, 5458.0], [50.7, 5459.0], [50.8, 5465.0], [50.9, 5491.0], [51.0, 5503.0], [51.1, 5510.0], [51.2, 5563.0], [51.3, 5570.0], [51.4, 5611.0], [51.5, 5626.0], [51.6, 5636.0], [51.7, 5636.0], [51.8, 5657.0], [51.9, 5659.0], [52.0, 5672.0], [52.1, 5685.0], [52.2, 5711.0], [52.3, 5714.0], [52.4, 5723.0], [52.5, 5748.0], [52.6, 5749.0], [52.7, 5794.0], [52.8, 5889.0], [52.9, 5890.0], [53.0, 5905.0], [53.1, 6011.0], [53.2, 6065.0], [53.3, 6107.0], [53.4, 6139.0], [53.5, 6287.0], [53.6, 6291.0], [53.7, 6319.0], [53.8, 6321.0], [53.9, 6347.0], [54.0, 6354.0], [54.1, 6359.0], [54.2, 6381.0], [54.3, 6412.0], [54.4, 6459.0], [54.5, 6465.0], [54.6, 6488.0], [54.7, 6520.0], [54.8, 6703.0], [54.9, 6704.0], [55.0, 6787.0], [55.1, 6816.0], [55.2, 6912.0], [55.3, 6958.0], [55.4, 7085.0], [55.5, 7124.0], [55.6, 7156.0], [55.7, 7255.0], [55.8, 7472.0], [55.9, 7951.0], [56.0, 8012.0], [56.1, 8033.0], [56.2, 8042.0], [56.3, 8085.0], [56.4, 8088.0], [56.5, 8108.0], [56.6, 8152.0], [56.7, 8192.0], [56.8, 8259.0], [56.9, 8400.0], [57.0, 8413.0], [57.1, 8423.0], [57.2, 8432.0], [57.3, 8525.0], [57.4, 8538.0], [57.5, 8672.0], [57.6, 8675.0], [57.7, 8728.0], [57.8, 8775.0], [57.9, 8939.0], [58.0, 8954.0], [58.1, 8955.0], [58.2, 9003.0], [58.3, 9023.0], [58.4, 9031.0], [58.5, 9033.0], [58.6, 9071.0], [58.7, 9115.0], [58.8, 9127.0], [58.9, 9168.0], [59.0, 9241.0], [59.1, 9331.0], [59.2, 9348.0], [59.3, 9354.0], [59.4, 9455.0], [59.5, 9529.0], [59.6, 9536.0], [59.7, 9536.0], [59.8, 9611.0], [59.9, 9624.0], [60.0, 9630.0], [60.1, 9640.0], [60.2, 9644.0], [60.3, 9689.0], [60.4, 9718.0], [60.5, 9789.0], [60.6, 9839.0], [60.7, 9842.0], [60.8, 9852.0], [60.9, 9875.0], [61.0, 9876.0], [61.1, 9878.0], [61.2, 9934.0], [61.3, 10010.0], [61.4, 10022.0], [61.5, 10026.0], [61.6, 10029.0], [61.7, 10037.0], [61.8, 10043.0], [61.9, 10043.0], [62.0, 10046.0], [62.1, 10050.0], [62.2, 10062.0], [62.3, 10074.0], [62.4, 10074.0], [62.5, 10077.0], [62.6, 10134.0], [62.7, 10136.0], [62.8, 10152.0], [62.9, 10158.0], [63.0, 10160.0], [63.1, 10207.0], [63.2, 10228.0], [63.3, 10325.0], [63.4, 10337.0], [63.5, 10340.0], [63.6, 10349.0], [63.7, 10351.0], [63.8, 10359.0], [63.9, 10367.0], [64.0, 10389.0], [64.1, 10395.0], [64.2, 10436.0], [64.3, 10461.0], [64.4, 10511.0], [64.5, 10516.0], [64.6, 10630.0], [64.7, 10655.0], [64.8, 10741.0], [64.9, 10849.0], [65.0, 10859.0], [65.1, 10876.0], [65.2, 10932.0], [65.3, 10983.0], [65.4, 11089.0], [65.5, 11111.0], [65.6, 11119.0], [65.7, 11230.0], [65.8, 11258.0], [65.9, 11280.0], [66.0, 11363.0], [66.1, 11504.0], [66.2, 11507.0], [66.3, 11528.0], [66.4, 11540.0], [66.5, 11542.0], [66.6, 11545.0], [66.7, 11560.0], [66.8, 11583.0], [66.9, 11606.0], [67.0, 11622.0], [67.1, 11628.0], [67.2, 11633.0], [67.3, 11636.0], [67.4, 11671.0], [67.5, 11706.0], [67.6, 11788.0], [67.7, 11817.0], [67.8, 11854.0], [67.9, 11892.0], [68.0, 11896.0], [68.1, 11907.0], [68.2, 11958.0], [68.3, 11971.0], [68.4, 11995.0], [68.5, 12023.0], [68.6, 12034.0], [68.7, 12052.0], [68.8, 12058.0], [68.9, 12069.0], [69.0, 12076.0], [69.1, 12077.0], [69.2, 12099.0], [69.3, 12111.0], [69.4, 12117.0], [69.5, 12127.0], [69.6, 12169.0], [69.7, 12183.0], [69.8, 12189.0], [69.9, 12194.0], [70.0, 12196.0], [70.1, 12221.0], [70.2, 12242.0], [70.3, 12254.0], [70.4, 12259.0], [70.5, 12322.0], [70.6, 12356.0], [70.7, 12406.0], [70.8, 12422.0], [70.9, 12440.0], [71.0, 12440.0], [71.1, 12529.0], [71.2, 12558.0], [71.3, 12561.0], [71.4, 12572.0], [71.5, 12599.0], [71.6, 12602.0], [71.7, 12635.0], [71.8, 12645.0], [71.9, 12653.0], [72.0, 12661.0], [72.1, 12667.0], [72.2, 12673.0], [72.3, 12674.0], [72.4, 12695.0], [72.5, 12710.0], [72.6, 12717.0], [72.7, 12722.0], [72.8, 12739.0], [72.9, 12744.0], [73.0, 12760.0], [73.1, 12774.0], [73.2, 12783.0], [73.3, 12793.0], [73.4, 12796.0], [73.5, 12804.0], [73.6, 12805.0], [73.7, 12813.0], [73.8, 12814.0], [73.9, 12818.0], [74.0, 12831.0], [74.1, 12839.0], [74.2, 12848.0], [74.3, 12857.0], [74.4, 12911.0], [74.5, 12923.0], [74.6, 12928.0], [74.7, 12953.0], [74.8, 12966.0], [74.9, 12968.0], [75.0, 12982.0], [75.1, 12989.0], [75.2, 12990.0], [75.3, 13011.0], [75.4, 13016.0], [75.5, 13019.0], [75.6, 13038.0], [75.7, 13041.0], [75.8, 13044.0], [75.9, 13046.0], [76.0, 13052.0], [76.1, 13079.0], [76.2, 13082.0], [76.3, 13089.0], [76.4, 13090.0], [76.5, 13097.0], [76.6, 13100.0], [76.7, 13105.0], [76.8, 13115.0], [76.9, 13115.0], [77.0, 13120.0], [77.1, 13134.0], [77.2, 13136.0], [77.3, 13136.0], [77.4, 13146.0], [77.5, 13146.0], [77.6, 13147.0], [77.7, 13148.0], [77.8, 13150.0], [77.9, 13155.0], [78.0, 13157.0], [78.1, 13158.0], [78.2, 13163.0], [78.3, 13190.0], [78.4, 13213.0], [78.5, 13228.0], [78.6, 13260.0], [78.7, 13262.0], [78.8, 13279.0], [78.9, 13279.0], [79.0, 13287.0], [79.1, 13293.0], [79.2, 13294.0], [79.3, 13324.0], [79.4, 13346.0], [79.5, 13350.0], [79.6, 13366.0], [79.7, 13369.0], [79.8, 13369.0], [79.9, 13377.0], [80.0, 13389.0], [80.1, 13409.0], [80.2, 13443.0], [80.3, 13450.0], [80.4, 13525.0], [80.5, 13638.0], [80.6, 13667.0], [80.7, 13704.0], [80.8, 13741.0], [80.9, 13771.0], [81.0, 13910.0], [81.1, 13955.0], [81.2, 13993.0], [81.3, 14122.0], [81.4, 14142.0], [81.5, 14154.0], [81.6, 14179.0], [81.7, 14187.0], [81.8, 14235.0], [81.9, 14240.0], [82.0, 14271.0], [82.1, 14279.0], [82.2, 14279.0], [82.3, 14302.0], [82.4, 14352.0], [82.5, 14380.0], [82.6, 14385.0], [82.7, 14399.0], [82.8, 14468.0], [82.9, 14468.0], [83.0, 14486.0], [83.1, 14515.0], [83.2, 14517.0], [83.3, 14530.0], [83.4, 14535.0], [83.5, 14546.0], [83.6, 14568.0], [83.7, 14569.0], [83.8, 14575.0], [83.9, 14584.0], [84.0, 14611.0], [84.1, 14639.0], [84.2, 14668.0], [84.3, 14673.0], [84.4, 14701.0], [84.5, 14723.0], [84.6, 14740.0], [84.7, 14759.0], [84.8, 14774.0], [84.9, 14778.0], [85.0, 14784.0], [85.1, 14787.0], [85.2, 14810.0], [85.3, 14816.0], [85.4, 14825.0], [85.5, 14826.0], [85.6, 14833.0], [85.7, 14847.0], [85.8, 14857.0], [85.9, 14859.0], [86.0, 14875.0], [86.1, 14886.0], [86.2, 14916.0], [86.3, 14923.0], [86.4, 14935.0], [86.5, 14958.0], [86.6, 14961.0], [86.7, 14966.0], [86.8, 15008.0], [86.9, 15013.0], [87.0, 15018.0], [87.1, 15020.0], [87.2, 15025.0], [87.3, 15045.0], [87.4, 15053.0], [87.5, 15094.0], [87.6, 15103.0], [87.7, 15112.0], [87.8, 15114.0], [87.9, 15126.0], [88.0, 15130.0], [88.1, 15168.0], [88.2, 15170.0], [88.3, 15183.0], [88.4, 15184.0], [88.5, 15187.0], [88.6, 15197.0], [88.7, 15206.0], [88.8, 15212.0], [88.9, 15219.0], [89.0, 15220.0], [89.1, 15223.0], [89.2, 15230.0], [89.3, 15233.0], [89.4, 15235.0], [89.5, 15244.0], [89.6, 15247.0], [89.7, 15249.0], [89.8, 15252.0], [89.9, 15255.0], [90.0, 15258.0], [90.1, 15260.0], [90.2, 15263.0], [90.3, 15264.0], [90.4, 15268.0], [90.5, 15270.0], [90.6, 15272.0], [90.7, 15275.0], [90.8, 15277.0], [90.9, 15279.0], [91.0, 15295.0], [91.1, 15315.0], [91.2, 15323.0], [91.3, 15325.0], [91.4, 15346.0], [91.5, 15374.0], [91.6, 15375.0], [91.7, 15377.0], [91.8, 15378.0], [91.9, 15382.0], [92.0, 15382.0], [92.1, 15386.0], [92.2, 15388.0], [92.3, 15394.0], [92.4, 15395.0], [92.5, 15398.0], [92.6, 15399.0], [92.7, 15411.0], [92.8, 15416.0], [92.9, 15431.0], [93.0, 15442.0], [93.1, 15450.0], [93.2, 15462.0], [93.3, 15465.0], [93.4, 15487.0], [93.5, 15516.0], [93.6, 15522.0], [93.7, 15527.0], [93.8, 15532.0], [93.9, 15554.0], [94.0, 15558.0], [94.1, 15611.0], [94.2, 15612.0], [94.3, 15645.0], [94.4, 15696.0], [94.5, 15723.0], [94.6, 15725.0], [94.7, 15739.0], [94.8, 15750.0], [94.9, 15779.0], [95.0, 15811.0], [95.1, 15831.0], [95.2, 15869.0], [95.3, 15875.0], [95.4, 15877.0], [95.5, 15948.0], [95.6, 15967.0], [95.7, 16045.0], [95.8, 16070.0], [95.9, 16081.0], [96.0, 16081.0], [96.1, 16097.0], [96.2, 16113.0], [96.3, 16119.0], [96.4, 16125.0], [96.5, 16139.0], [96.6, 16171.0], [96.7, 16175.0], [96.8, 16208.0], [96.9, 16230.0], [97.0, 16247.0], [97.1, 16294.0], [97.2, 16326.0], [97.3, 16369.0], [97.4, 16451.0], [97.5, 16475.0], [97.6, 16493.0], [97.7, 16506.0], [97.8, 16541.0], [97.9, 16624.0], [98.0, 16681.0], [98.1, 16723.0], [98.2, 16741.0], [98.3, 16761.0], [98.4, 16766.0], [98.5, 16786.0], [98.6, 16794.0], [98.7, 16839.0], [98.8, 16844.0], [98.9, 16982.0], [99.0, 17016.0], [99.1, 17061.0], [99.2, 17064.0], [99.3, 17161.0], [99.4, 17161.0], [99.5, 17179.0], [99.6, 17255.0], [99.7, 17275.0], [99.8, 17372.0], [99.9, 17374.0]], "isOverall": false, "label": "GraphQL HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 800.0, "maxY": 48.0, "series": [{"data": [[800.0, 3.0], [900.0, 48.0], [1000.0, 19.0], [1100.0, 33.0], [1200.0, 48.0], [1300.0, 44.0], [1400.0, 30.0], [1500.0, 12.0], [1600.0, 7.0], [1700.0, 5.0], [1800.0, 4.0], [1900.0, 1.0], [2000.0, 1.0], [2100.0, 9.0], [2300.0, 6.0], [2200.0, 15.0], [2400.0, 15.0], [2500.0, 14.0], [2600.0, 11.0], [2700.0, 1.0], [2900.0, 1.0], [3000.0, 3.0], [3100.0, 15.0], [3200.0, 16.0], [3300.0, 3.0], [3400.0, 13.0], [3500.0, 6.0], [3600.0, 13.0], [3700.0, 22.0], [3800.0, 4.0], [3900.0, 7.0], [4000.0, 10.0], [4200.0, 9.0], [4100.0, 5.0], [4300.0, 9.0], [4500.0, 8.0], [4600.0, 8.0], [4400.0, 5.0], [4700.0, 5.0], [4800.0, 6.0], [5100.0, 5.0], [4900.0, 5.0], [5000.0, 4.0], [5300.0, 8.0], [5200.0, 4.0], [5400.0, 13.0], [5500.0, 4.0], [5600.0, 9.0], [5800.0, 2.0], [5700.0, 6.0], [6100.0, 2.0], [5900.0, 1.0], [6000.0, 2.0], [6300.0, 6.0], [6200.0, 2.0], [6400.0, 5.0], [6500.0, 1.0], [6900.0, 2.0], [6700.0, 3.0], [6800.0, 1.0], [7100.0, 2.0], [7000.0, 1.0], [7400.0, 1.0], [7200.0, 1.0], [7900.0, 1.0], [8000.0, 5.0], [8100.0, 4.0], [8600.0, 2.0], [8700.0, 2.0], [8400.0, 4.0], [8500.0, 2.0], [8200.0, 1.0], [8900.0, 3.0], [9000.0, 5.0], [9100.0, 4.0], [9200.0, 1.0], [9600.0, 6.0], [9500.0, 3.0], [9400.0, 1.0], [9700.0, 2.0], [9300.0, 3.0], [10000.0, 13.0], [9900.0, 1.0], [10100.0, 6.0], [10200.0, 2.0], [9800.0, 7.0], [10300.0, 9.0], [10600.0, 2.0], [10400.0, 2.0], [10500.0, 2.0], [10700.0, 1.0], [10800.0, 3.0], [11200.0, 3.0], [11100.0, 2.0], [10900.0, 3.0], [11000.0, 1.0], [11500.0, 8.0], [11300.0, 1.0], [11700.0, 2.0], [11600.0, 7.0], [11800.0, 4.0], [11900.0, 4.0], [12000.0, 8.0], [12100.0, 9.0], [12200.0, 4.0], [12500.0, 5.0], [12700.0, 10.0], [12600.0, 10.0], [12400.0, 4.0], [12300.0, 2.0], [13000.0, 14.0], [13200.0, 9.0], [13100.0, 19.0], [12800.0, 10.0], [12900.0, 9.0], [13300.0, 8.0], [13700.0, 3.0], [13600.0, 2.0], [13400.0, 3.0], [13500.0, 2.0], [13900.0, 3.0], [14100.0, 5.0], [14200.0, 5.0], [14300.0, 6.0], [14500.0, 9.0], [14800.0, 10.0], [14600.0, 4.0], [14700.0, 9.0], [14400.0, 3.0], [15200.0, 25.0], [15100.0, 11.0], [15300.0, 17.0], [14900.0, 6.0], [15000.0, 9.0], [15500.0, 6.0], [15400.0, 9.0], [15600.0, 4.0], [15700.0, 5.0], [15800.0, 5.0], [15900.0, 2.0], [16100.0, 6.0], [16200.0, 4.0], [16300.0, 2.0], [16000.0, 6.0], [16600.0, 3.0], [16400.0, 3.0], [16900.0, 1.0], [17400.0, 1.0], [16700.0, 6.0], [16500.0, 2.0], [17300.0, 2.0], [17200.0, 2.0], [16800.0, 2.0], [17000.0, 3.0], [17100.0, 3.0]], "isOverall": false, "label": "GraphQL HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 17400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 69.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 804.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 69.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 804.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 173.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 46.080924855491325, "minX": 1.70246802E12, "maxY": 160.91981672394076, "series": [{"data": [[1.70252394E12, 160.91981672394076], [1.70246802E12, 46.080924855491325]], "isOverall": false, "label": "bzm - Concurrency Thread Group-ThreadStarter", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70252394E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 959.3928571428571, "minX": 1.0, "maxY": 17374.0, "series": [{"data": [[18.0, 15908.470588235294], [19.0, 16766.0], [20.0, 1169.2727272727275], [21.0, 16055.0], [22.0, 16761.0], [23.0, 15877.0], [25.0, 17161.0], [26.0, 16623.5], [27.0, 16681.0], [29.0, 15656.5], [30.0, 959.3928571428571], [31.0, 16496.0], [32.0, 16208.0], [35.0, 14857.0], [34.0, 16731.5], [37.0, 17061.0], [36.0, 17255.0], [39.0, 16475.0], [38.0, 16741.0], [40.0, 1030.4545454545453], [47.0, 17374.0], [46.0, 16234.428571428572], [49.0, 16119.0], [48.0, 15696.0], [50.0, 1641.4571428571428], [51.0, 4718.0], [53.0, 1597.0], [55.0, 13186.8], [56.0, 6505.0], [57.0, 16171.0], [59.0, 8548.0], [58.0, 9141.0], [60.0, 2376.605633802817], [61.0, 14886.0], [63.0, 8988.0], [62.0, 4842.6], [67.0, 1414.0], [66.0, 1555.5], [65.0, 1483.0], [70.0, 2252.942857142856], [80.0, 2008.4516129032259], [90.0, 2086.434782608696], [92.0, 3550.0], [99.0, 14179.0], [98.0, 14302.0], [97.0, 13460.0], [100.0, 3305.411764705882], [103.0, 14675.5], [101.0, 15272.0], [105.0, 15114.0], [104.0, 14723.0], [110.0, 3410.5789473684213], [111.0, 15869.0], [109.0, 15507.75], [115.0, 14787.0], [114.0, 15612.0], [113.0, 16175.0], [112.0, 15018.0], [119.0, 15779.0], [117.0, 15382.0], [116.0, 14816.0], [120.0, 3698.5714285714284], [122.0, 14639.0], [121.0, 14774.0], [127.0, 14847.0], [130.0, 3248.6666666666656], [135.0, 15725.0], [134.0, 14611.0], [133.0, 14352.0], [132.0, 15131.111111111111], [140.0, 3823.2068965517237], [143.0, 15226.0], [142.0, 15442.0], [141.0, 15948.0], [139.0, 15295.0], [138.0, 15255.0], [137.0, 15346.0], [136.0, 15168.0], [150.0, 4509.976190476191], [151.0, 14142.0], [149.0, 14888.0], [146.0, 14961.0], [145.0, 15465.0], [144.0, 15184.0], [158.0, 14468.0], [157.0, 14761.0], [156.0, 13993.0], [155.0, 14530.0], [154.0, 15053.0], [153.0, 15013.0], [152.0, 14826.0], [160.0, 4641.8], [165.0, 14729.857142857143], [170.0, 4629.058823529412], [180.0, 5260.333333333334], [183.0, 15043.411764705885], [190.0, 7388.333333333333], [189.0, 15260.0], [188.0, 15277.0], [187.0, 15061.0], [185.0, 14929.0], [184.0, 15212.0], [196.0, 11239.5], [199.0, 15450.0], [197.0, 15394.0], [194.0, 15416.0], [193.0, 15183.0], [192.0, 15224.5], [200.0, 8869.2], [207.0, 15126.0], [205.0, 15121.0], [203.0, 15385.5], [210.0, 8934.214285714284], [214.0, 15223.0], [213.0, 15234.0], [211.0, 15245.5], [208.0, 15273.5], [220.0, 6323.428571428572], [223.0, 13283.0], [221.0, 15097.0], [217.0, 14576.5], [216.0, 14575.0], [230.0, 6859.903225806451], [231.0, 13101.0], [229.0, 13213.0], [228.0, 13262.0], [226.0, 13368.5], [224.0, 13260.0], [238.0, 12862.0], [236.0, 13041.0], [235.0, 13190.0], [234.0, 13324.0], [233.0, 13131.5], [240.0, 8612.193548387097], [246.0, 13095.0], [244.0, 13293.0], [242.0, 12943.0], [250.0, 10416.5], [249.0, 13263.666666666666], [260.0, 10873.42857142857], [270.0, 12160.499999999996], [267.0, 12982.0], [258.0, 13293.0], [280.0, 12477.2], [282.0, 12755.0], [277.0, 12989.0], [273.0, 12860.40909090909], [300.0, 9625.807692307691], [298.0, 12069.0], [297.0, 11817.0], [296.0, 12113.6], [291.0, 12798.555555555555], [1.0, 14380.0]], "isOverall": false, "label": "GraphQL HTTP Request", "isController": false}, {"data": [[141.91300191204593, 7401.7896749522015]], "isOverall": false, "label": "GraphQL HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 300.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1112.5833333333333, "minX": 1.70246802E12, "maxY": 53747.7, "series": [{"data": [[1.70252394E12, 50255.7], [1.70246802E12, 1112.5833333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.70252394E12, 53747.7], [1.70246802E12, 10589.466666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70252394E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1187.7745664739887, "minX": 1.70246802E12, "maxY": 8633.203894616274, "series": [{"data": [[1.70252394E12, 8633.203894616274], [1.70246802E12, 1187.7745664739887]], "isOverall": false, "label": "GraphQL HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70252394E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1177.549132947977, "minX": 1.70246802E12, "maxY": 8633.155784650622, "series": [{"data": [[1.70252394E12, 8633.155784650622], [1.70246802E12, 1177.549132947977]], "isOverall": false, "label": "GraphQL HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70252394E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 778.6300578034679, "minX": 1.70246802E12, "maxY": 5524.524627720496, "series": [{"data": [[1.70252394E12, 5524.524627720496], [1.70246802E12, 778.6300578034679]], "isOverall": false, "label": "GraphQL HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70252394E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1131.0, "minX": 1.70252394E12, "maxY": 17403.0, "series": [{"data": [[1.70252394E12, 17403.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.70252394E12, 15376.2]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.70252394E12, 17089.219999999998]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.70252394E12, 16073.3]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.70252394E12, 1131.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.70252394E12, 9023.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70252394E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 930.5, "minX": 3.0, "maxY": 16294.0, "series": [{"data": [[33.0, 2641.0], [34.0, 11517.5], [35.0, 15013.0], [38.0, 12974.0], [41.0, 15008.0], [3.0, 14575.0], [56.0, 14695.5], [4.0, 1490.5], [5.0, 8775.0], [6.0, 4360.0], [7.0, 12088.0], [8.0, 6350.5], [13.0, 10332.0], [14.0, 4406.5], [15.0, 15247.0], [17.0, 4654.0], [18.0, 13101.0], [19.0, 16294.0], [20.0, 8086.5], [21.0, 4886.0], [25.0, 2163.0], [27.0, 10630.0], [28.0, 4072.0], [29.0, 3754.0], [31.0, 3614.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[33.0, 952.0], [4.0, 1772.0], [37.0, 1148.0], [10.0, 1256.0], [20.0, 930.5], [46.0, 1295.5], [23.0, 1481.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 56.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 930.5, "minX": 3.0, "maxY": 16294.0, "series": [{"data": [[33.0, 2641.0], [34.0, 11517.5], [35.0, 15013.0], [38.0, 12974.0], [41.0, 15008.0], [3.0, 14575.0], [56.0, 14695.5], [4.0, 1490.5], [5.0, 8775.0], [6.0, 4360.0], [7.0, 12088.0], [8.0, 6350.5], [13.0, 10332.0], [14.0, 4406.0], [15.0, 15247.0], [17.0, 4654.0], [18.0, 13101.0], [19.0, 16294.0], [20.0, 8086.5], [21.0, 4886.0], [25.0, 2163.0], [27.0, 10630.0], [28.0, 4072.0], [29.0, 3754.0], [31.0, 3614.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[33.0, 952.0], [4.0, 1713.0], [37.0, 1148.0], [10.0, 1256.0], [20.0, 930.5], [46.0, 1295.5], [23.0, 1481.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 56.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 2.8833333333333333, "minX": 1.70246802E12, "maxY": 14.55, "series": [{"data": [[1.70252394E12, 14.55], [1.70246802E12, 2.8833333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70252394E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.70246802E12, "maxY": 14.55, "series": [{"data": [[1.70252394E12, 14.55]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.70246802E12, 2.8666666666666667]], "isOverall": false, "label": "401", "isController": false}, {"data": [[1.70246802E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70252394E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 2.8833333333333333, "minX": 1.70246802E12, "maxY": 14.55, "series": [{"data": [[1.70246802E12, 2.8833333333333333]], "isOverall": false, "label": "GraphQL HTTP Request-failure", "isController": false}, {"data": [[1.70252394E12, 14.55]], "isOverall": false, "label": "GraphQL HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70252394E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 2.8833333333333333, "minX": 1.70246802E12, "maxY": 14.55, "series": [{"data": [[1.70252394E12, 14.55]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.70246802E12, 2.8833333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70252394E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

