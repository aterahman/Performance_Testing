/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1365.0, "minX": 0.0, "maxY": 27680.0, "series": [{"data": [[0.0, 1365.0], [0.1, 1365.0], [0.2, 1366.0], [0.3, 1416.0], [0.4, 1424.0], [0.5, 1467.0], [0.6, 1478.0], [0.7, 1491.0], [0.8, 1498.0], [0.9, 1508.0], [1.0, 1509.0], [1.1, 1513.0], [1.2, 1519.0], [1.3, 1520.0], [1.4, 1528.0], [1.5, 1528.0], [1.6, 1529.0], [1.7, 1533.0], [1.8, 1533.0], [1.9, 1538.0], [2.0, 1547.0], [2.1, 1563.0], [2.2, 1566.0], [2.3, 1574.0], [2.4, 1578.0], [2.5, 1582.0], [2.6, 1583.0], [2.7, 1584.0], [2.8, 1596.0], [2.9, 1596.0], [3.0, 1604.0], [3.1, 1606.0], [3.2, 1606.0], [3.3, 1612.0], [3.4, 1613.0], [3.5, 1615.0], [3.6, 1617.0], [3.7, 1622.0], [3.8, 1630.0], [3.9, 1632.0], [4.0, 1642.0], [4.1, 1643.0], [4.2, 1645.0], [4.3, 1645.0], [4.4, 1645.0], [4.5, 1656.0], [4.6, 1661.0], [4.7, 1661.0], [4.8, 1664.0], [4.9, 1664.0], [5.0, 1666.0], [5.1, 1683.0], [5.2, 1686.0], [5.3, 1691.0], [5.4, 1692.0], [5.5, 1708.0], [5.6, 1712.0], [5.7, 1715.0], [5.8, 1715.0], [5.9, 1717.0], [6.0, 1719.0], [6.1, 1724.0], [6.2, 1755.0], [6.3, 1778.0], [6.4, 1797.0], [6.5, 1808.0], [6.6, 1809.0], [6.7, 1818.0], [6.8, 1822.0], [6.9, 1837.0], [7.0, 1839.0], [7.1, 1861.0], [7.2, 1861.0], [7.3, 1882.0], [7.4, 1900.0], [7.5, 1901.0], [7.6, 1901.0], [7.7, 1919.0], [7.8, 1922.0], [7.9, 1922.0], [8.0, 1930.0], [8.1, 1954.0], [8.2, 1962.0], [8.3, 1972.0], [8.4, 1992.0], [8.5, 1997.0], [8.6, 1997.0], [8.7, 2027.0], [8.8, 2032.0], [8.9, 2042.0], [9.0, 2047.0], [9.1, 2047.0], [9.2, 2054.0], [9.3, 2055.0], [9.4, 2062.0], [9.5, 2079.0], [9.6, 2081.0], [9.7, 2085.0], [9.8, 2096.0], [9.9, 2098.0], [10.0, 2105.0], [10.1, 2105.0], [10.2, 2115.0], [10.3, 2121.0], [10.4, 2125.0], [10.5, 2131.0], [10.6, 2131.0], [10.7, 2144.0], [10.8, 2158.0], [10.9, 2169.0], [11.0, 2190.0], [11.1, 2195.0], [11.2, 2368.0], [11.3, 2392.0], [11.4, 2411.0], [11.5, 2411.0], [11.6, 2450.0], [11.7, 2463.0], [11.8, 2483.0], [11.9, 2525.0], [12.0, 2540.0], [12.1, 2558.0], [12.2, 2560.0], [12.3, 2572.0], [12.4, 2581.0], [12.5, 2597.0], [12.6, 2610.0], [12.7, 2626.0], [12.8, 2670.0], [12.9, 2670.0], [13.0, 2690.0], [13.1, 2756.0], [13.2, 2774.0], [13.3, 2781.0], [13.4, 2797.0], [13.5, 2807.0], [13.6, 2838.0], [13.7, 2842.0], [13.8, 2843.0], [13.9, 2856.0], [14.0, 2864.0], [14.1, 2875.0], [14.2, 2877.0], [14.3, 2877.0], [14.4, 2883.0], [14.5, 2889.0], [14.6, 2891.0], [14.7, 2894.0], [14.8, 2908.0], [14.9, 2921.0], [15.0, 2936.0], [15.1, 2940.0], [15.2, 2942.0], [15.3, 2945.0], [15.4, 2949.0], [15.5, 3017.0], [15.6, 3036.0], [15.7, 3038.0], [15.8, 3038.0], [15.9, 3043.0], [16.0, 3085.0], [16.1, 3092.0], [16.2, 3099.0], [16.3, 3105.0], [16.4, 3114.0], [16.5, 3119.0], [16.6, 3119.0], [16.7, 3124.0], [16.8, 3137.0], [16.9, 3141.0], [17.0, 3142.0], [17.1, 3151.0], [17.2, 3151.0], [17.3, 3153.0], [17.4, 3195.0], [17.5, 3195.0], [17.6, 3205.0], [17.7, 3225.0], [17.8, 3231.0], [17.9, 3246.0], [18.0, 3261.0], [18.1, 3264.0], [18.2, 3265.0], [18.3, 3275.0], [18.4, 3291.0], [18.5, 3293.0], [18.6, 3293.0], [18.7, 3293.0], [18.8, 3309.0], [18.9, 3310.0], [19.0, 3312.0], [19.1, 3312.0], [19.2, 3313.0], [19.3, 3342.0], [19.4, 3347.0], [19.5, 3354.0], [19.6, 3359.0], [19.7, 3378.0], [19.8, 3401.0], [19.9, 3402.0], [20.0, 3402.0], [20.1, 3405.0], [20.2, 3405.0], [20.3, 3434.0], [20.4, 3443.0], [20.5, 3446.0], [20.6, 3449.0], [20.7, 3452.0], [20.8, 3455.0], [20.9, 3509.0], [21.0, 3510.0], [21.1, 3512.0], [21.2, 3527.0], [21.3, 3582.0], [21.4, 3593.0], [21.5, 3593.0], [21.6, 3597.0], [21.7, 3603.0], [21.8, 3630.0], [21.9, 3636.0], [22.0, 3669.0], [22.1, 3721.0], [22.2, 3723.0], [22.3, 3763.0], [22.4, 3778.0], [22.5, 3790.0], [22.6, 3791.0], [22.7, 3809.0], [22.8, 3819.0], [22.9, 3819.0], [23.0, 3837.0], [23.1, 3884.0], [23.2, 3894.0], [23.3, 3913.0], [23.4, 3949.0], [23.5, 3956.0], [23.6, 3962.0], [23.7, 3962.0], [23.8, 3965.0], [23.9, 3971.0], [24.0, 4002.0], [24.1, 4016.0], [24.2, 4047.0], [24.3, 4047.0], [24.4, 4076.0], [24.5, 4093.0], [24.6, 4096.0], [24.7, 4101.0], [24.8, 4173.0], [24.9, 4184.0], [25.0, 4202.0], [25.1, 4208.0], [25.2, 4217.0], [25.3, 4236.0], [25.4, 4246.0], [25.5, 4249.0], [25.6, 4264.0], [25.7, 4279.0], [25.8, 4279.0], [25.9, 4291.0], [26.0, 4301.0], [26.1, 4309.0], [26.2, 4312.0], [26.3, 4313.0], [26.4, 4315.0], [26.5, 4319.0], [26.6, 4321.0], [26.7, 4327.0], [26.8, 4343.0], [26.9, 4352.0], [27.0, 4372.0], [27.1, 4372.0], [27.2, 4372.0], [27.3, 4372.0], [27.4, 4396.0], [27.5, 4402.0], [27.6, 4409.0], [27.7, 4416.0], [27.8, 4432.0], [27.9, 4437.0], [28.0, 4439.0], [28.1, 4455.0], [28.2, 4460.0], [28.3, 4478.0], [28.4, 4479.0], [28.5, 4488.0], [28.6, 4488.0], [28.7, 4491.0], [28.8, 4499.0], [28.9, 4525.0], [29.0, 4529.0], [29.1, 4531.0], [29.2, 4532.0], [29.3, 4533.0], [29.4, 4551.0], [29.5, 4552.0], [29.6, 4571.0], [29.7, 4572.0], [29.8, 4581.0], [29.9, 4591.0], [30.0, 4591.0], [30.1, 4600.0], [30.2, 4630.0], [30.3, 4636.0], [30.4, 4644.0], [30.5, 4676.0], [30.6, 4679.0], [30.7, 4688.0], [30.8, 4708.0], [30.9, 4715.0], [31.0, 4733.0], [31.1, 4741.0], [31.2, 4743.0], [31.3, 4757.0], [31.4, 4779.0], [31.5, 4779.0], [31.6, 4791.0], [31.7, 4791.0], [31.8, 4795.0], [31.9, 4797.0], [32.0, 4798.0], [32.1, 4825.0], [32.2, 4836.0], [32.3, 4839.0], [32.4, 4839.0], [32.5, 4868.0], [32.6, 4872.0], [32.7, 4880.0], [32.8, 4886.0], [32.9, 4886.0], [33.0, 4927.0], [33.1, 4929.0], [33.2, 4935.0], [33.3, 4938.0], [33.4, 4967.0], [33.5, 5005.0], [33.6, 5019.0], [33.7, 5050.0], [33.8, 5083.0], [33.9, 5103.0], [34.0, 5112.0], [34.1, 5113.0], [34.2, 5135.0], [34.3, 5135.0], [34.4, 5167.0], [34.5, 5207.0], [34.6, 5208.0], [34.7, 5254.0], [34.8, 5271.0], [34.9, 5302.0], [35.0, 5322.0], [35.1, 5323.0], [35.2, 5342.0], [35.3, 5343.0], [35.4, 5353.0], [35.5, 5372.0], [35.6, 5374.0], [35.7, 5391.0], [35.8, 5391.0], [35.9, 5399.0], [36.0, 5401.0], [36.1, 5414.0], [36.2, 5416.0], [36.3, 5421.0], [36.4, 5438.0], [36.5, 5445.0], [36.6, 5448.0], [36.7, 5448.0], [36.8, 5453.0], [36.9, 5459.0], [37.0, 5466.0], [37.1, 5480.0], [37.2, 5480.0], [37.3, 5491.0], [37.4, 5491.0], [37.5, 5493.0], [37.6, 5494.0], [37.7, 5495.0], [37.8, 5502.0], [37.9, 5512.0], [38.0, 5519.0], [38.1, 5532.0], [38.2, 5535.0], [38.3, 5537.0], [38.4, 5544.0], [38.5, 5568.0], [38.6, 5568.0], [38.7, 5571.0], [38.8, 5582.0], [38.9, 5583.0], [39.0, 5587.0], [39.1, 5589.0], [39.2, 5591.0], [39.3, 5611.0], [39.4, 5611.0], [39.5, 5626.0], [39.6, 5640.0], [39.7, 5682.0], [39.8, 5698.0], [39.9, 5712.0], [40.0, 5712.0], [40.1, 5727.0], [40.2, 5752.0], [40.3, 5758.0], [40.4, 5759.0], [40.5, 5760.0], [40.6, 5772.0], [40.7, 5774.0], [40.8, 5782.0], [40.9, 5799.0], [41.0, 5816.0], [41.1, 5837.0], [41.2, 5846.0], [41.3, 5849.0], [41.4, 5852.0], [41.5, 5852.0], [41.6, 5856.0], [41.7, 5865.0], [41.8, 5874.0], [41.9, 5880.0], [42.0, 5882.0], [42.1, 5882.0], [42.2, 5884.0], [42.3, 5885.0], [42.4, 5888.0], [42.5, 5899.0], [42.6, 5903.0], [42.7, 5917.0], [42.8, 5920.0], [42.9, 5920.0], [43.0, 5920.0], [43.1, 5920.0], [43.2, 5928.0], [43.3, 5930.0], [43.4, 5932.0], [43.5, 5932.0], [43.6, 5941.0], [43.7, 5949.0], [43.8, 5952.0], [43.9, 5962.0], [44.0, 5965.0], [44.1, 5976.0], [44.2, 5982.0], [44.3, 5982.0], [44.4, 5987.0], [44.5, 5999.0], [44.6, 6005.0], [44.7, 6009.0], [44.8, 6018.0], [44.9, 6026.0], [45.0, 6034.0], [45.1, 6037.0], [45.2, 6045.0], [45.3, 6045.0], [45.4, 6055.0], [45.5, 6055.0], [45.6, 6057.0], [45.7, 6058.0], [45.8, 6058.0], [45.9, 6066.0], [46.0, 6069.0], [46.1, 6086.0], [46.2, 6090.0], [46.3, 6103.0], [46.4, 6111.0], [46.5, 6111.0], [46.6, 6113.0], [46.7, 6114.0], [46.8, 6121.0], [46.9, 6122.0], [47.0, 6123.0], [47.1, 6125.0], [47.2, 6125.0], [47.3, 6164.0], [47.4, 6166.0], [47.5, 6167.0], [47.6, 6180.0], [47.7, 6183.0], [47.8, 6200.0], [47.9, 6226.0], [48.0, 6237.0], [48.1, 6246.0], [48.2, 6285.0], [48.3, 6304.0], [48.4, 6304.0], [48.5, 6313.0], [48.6, 6313.0], [48.7, 6321.0], [48.8, 6334.0], [48.9, 6363.0], [49.0, 6383.0], [49.1, 6401.0], [49.2, 6405.0], [49.3, 6407.0], [49.4, 6420.0], [49.5, 6422.0], [49.6, 6443.0], [49.7, 6455.0], [49.8, 6492.0], [49.9, 6494.0], [50.0, 6494.0], [50.1, 6504.0], [50.2, 6507.0], [50.3, 6516.0], [50.4, 6529.0], [50.5, 6531.0], [50.6, 6531.0], [50.7, 6539.0], [50.8, 6541.0], [50.9, 6560.0], [51.0, 6573.0], [51.1, 6579.0], [51.2, 6596.0], [51.3, 6629.0], [51.4, 6631.0], [51.5, 6631.0], [51.6, 6636.0], [51.7, 6638.0], [51.8, 6647.0], [51.9, 6662.0], [52.0, 6664.0], [52.1, 6668.0], [52.2, 6674.0], [52.3, 6675.0], [52.4, 6686.0], [52.5, 6688.0], [52.6, 6694.0], [52.7, 6696.0], [52.8, 6708.0], [52.9, 6708.0], [53.0, 6715.0], [53.1, 6723.0], [53.2, 6728.0], [53.3, 6730.0], [53.4, 6748.0], [53.5, 6752.0], [53.6, 6777.0], [53.7, 6782.0], [53.8, 6817.0], [53.9, 6826.0], [54.0, 6831.0], [54.1, 6845.0], [54.2, 6852.0], [54.3, 6852.0], [54.4, 6863.0], [54.5, 6877.0], [54.6, 6883.0], [54.7, 6884.0], [54.8, 6884.0], [54.9, 6891.0], [55.0, 6907.0], [55.1, 6913.0], [55.2, 6921.0], [55.3, 6928.0], [55.4, 6933.0], [55.5, 6944.0], [55.6, 6951.0], [55.7, 6967.0], [55.8, 6967.0], [55.9, 6982.0], [56.0, 6989.0], [56.1, 6990.0], [56.2, 6993.0], [56.3, 6998.0], [56.4, 7005.0], [56.5, 7006.0], [56.6, 7033.0], [56.7, 7040.0], [56.8, 7041.0], [56.9, 7053.0], [57.0, 7059.0], [57.1, 7063.0], [57.2, 7063.0], [57.3, 7064.0], [57.4, 7080.0], [57.5, 7090.0], [57.6, 7097.0], [57.7, 7105.0], [57.8, 7111.0], [57.9, 7112.0], [58.0, 7116.0], [58.1, 7130.0], [58.2, 7134.0], [58.3, 7139.0], [58.4, 7149.0], [58.5, 7150.0], [58.6, 7150.0], [58.7, 7154.0], [58.8, 7157.0], [58.9, 7168.0], [59.0, 7179.0], [59.1, 7182.0], [59.2, 7191.0], [59.3, 7202.0], [59.4, 7215.0], [59.5, 7235.0], [59.6, 7267.0], [59.7, 7267.0], [59.8, 7269.0], [59.9, 7271.0], [60.0, 7271.0], [60.1, 7283.0], [60.2, 7284.0], [60.3, 7321.0], [60.4, 7325.0], [60.5, 7330.0], [60.6, 7335.0], [60.7, 7338.0], [60.8, 7341.0], [60.9, 7345.0], [61.0, 7350.0], [61.1, 7360.0], [61.2, 7369.0], [61.3, 7384.0], [61.4, 7404.0], [61.5, 7404.0], [61.6, 7416.0], [61.7, 7416.0], [61.8, 7423.0], [61.9, 7425.0], [62.0, 7435.0], [62.1, 7439.0], [62.2, 7451.0], [62.3, 7471.0], [62.4, 7509.0], [62.5, 7510.0], [62.6, 7513.0], [62.7, 7542.0], [62.8, 7574.0], [62.9, 7574.0], [63.0, 7574.0], [63.1, 7585.0], [63.2, 7598.0], [63.3, 7604.0], [63.4, 7615.0], [63.5, 7632.0], [63.6, 7639.0], [63.7, 7661.0], [63.8, 7668.0], [63.9, 7677.0], [64.0, 7703.0], [64.1, 7758.0], [64.2, 7768.0], [64.3, 7768.0], [64.4, 7768.0], [64.5, 7775.0], [64.6, 7786.0], [64.7, 7787.0], [64.8, 7789.0], [64.9, 7793.0], [65.0, 7826.0], [65.1, 7829.0], [65.2, 7846.0], [65.3, 7851.0], [65.4, 7897.0], [65.5, 7909.0], [65.6, 7910.0], [65.7, 7918.0], [65.8, 7918.0], [65.9, 7923.0], [66.0, 7947.0], [66.1, 7959.0], [66.2, 7964.0], [66.3, 7971.0], [66.4, 7971.0], [66.5, 7972.0], [66.6, 7975.0], [66.7, 7982.0], [66.8, 8006.0], [66.9, 8008.0], [67.0, 8027.0], [67.1, 8054.0], [67.2, 8054.0], [67.3, 8056.0], [67.4, 8063.0], [67.5, 8083.0], [67.6, 8176.0], [67.7, 8181.0], [67.8, 8183.0], [67.9, 8185.0], [68.0, 8197.0], [68.1, 8262.0], [68.2, 8329.0], [68.3, 8376.0], [68.4, 8383.0], [68.5, 8395.0], [68.6, 8395.0], [68.7, 8410.0], [68.8, 8423.0], [68.9, 8487.0], [69.0, 8502.0], [69.1, 8544.0], [69.2, 8574.0], [69.3, 8583.0], [69.4, 8593.0], [69.5, 8612.0], [69.6, 8617.0], [69.7, 8748.0], [69.8, 8773.0], [69.9, 8823.0], [70.0, 8823.0], [70.1, 8855.0], [70.2, 8861.0], [70.3, 8875.0], [70.4, 8883.0], [70.5, 8925.0], [70.6, 8965.0], [70.7, 8989.0], [70.8, 9017.0], [70.9, 9040.0], [71.0, 9049.0], [71.1, 9073.0], [71.2, 9140.0], [71.3, 9147.0], [71.4, 9209.0], [71.5, 9209.0], [71.6, 9227.0], [71.7, 9244.0], [71.8, 9332.0], [71.9, 9355.0], [72.0, 9383.0], [72.1, 9410.0], [72.2, 9425.0], [72.3, 9425.0], [72.4, 9517.0], [72.5, 9540.0], [72.6, 9562.0], [72.7, 9574.0], [72.8, 9577.0], [72.9, 9577.0], [73.0, 9591.0], [73.1, 9603.0], [73.2, 9642.0], [73.3, 9642.0], [73.4, 9650.0], [73.5, 9713.0], [73.6, 9742.0], [73.7, 9772.0], [73.8, 9862.0], [73.9, 9883.0], [74.0, 9896.0], [74.1, 9955.0], [74.2, 10019.0], [74.3, 10019.0], [74.4, 10030.0], [74.5, 10056.0], [74.6, 10068.0], [74.7, 10091.0], [74.8, 10105.0], [74.9, 10117.0], [75.0, 10126.0], [75.1, 10126.0], [75.2, 10128.0], [75.3, 10136.0], [75.4, 10159.0], [75.5, 10202.0], [75.6, 10244.0], [75.7, 10294.0], [75.8, 10294.0], [75.9, 10304.0], [76.0, 10339.0], [76.1, 10373.0], [76.2, 10398.0], [76.3, 10440.0], [76.4, 10446.0], [76.5, 10447.0], [76.6, 10450.0], [76.7, 10524.0], [76.8, 10525.0], [76.9, 10546.0], [77.0, 10561.0], [77.1, 10563.0], [77.2, 10563.0], [77.3, 10588.0], [77.4, 10607.0], [77.5, 10621.0], [77.6, 10636.0], [77.7, 10651.0], [77.8, 10655.0], [77.9, 10657.0], [78.0, 10658.0], [78.1, 10851.0], [78.2, 10895.0], [78.3, 10988.0], [78.4, 11335.0], [78.5, 11659.0], [78.6, 11659.0], [78.7, 11954.0], [78.8, 12098.0], [78.9, 12330.0], [79.0, 12563.0], [79.1, 12796.0], [79.2, 14028.0], [79.3, 14185.0], [79.4, 14211.0], [79.5, 14217.0], [79.6, 14291.0], [79.7, 14304.0], [79.8, 14323.0], [79.9, 14748.0], [80.0, 14748.0], [80.1, 15206.0], [80.2, 15381.0], [80.3, 15671.0], [80.4, 15684.0], [80.5, 15756.0], [80.6, 15840.0], [80.7, 15876.0], [80.8, 15903.0], [80.9, 15915.0], [81.0, 15924.0], [81.1, 16151.0], [81.2, 16158.0], [81.3, 16205.0], [81.4, 16312.0], [81.5, 16312.0], [81.6, 16327.0], [81.7, 16336.0], [81.8, 16383.0], [81.9, 16389.0], [82.0, 16400.0], [82.1, 16427.0], [82.2, 16430.0], [82.3, 16433.0], [82.4, 16469.0], [82.5, 16473.0], [82.6, 16480.0], [82.7, 16514.0], [82.8, 16542.0], [82.9, 16542.0], [83.0, 16546.0], [83.1, 16575.0], [83.2, 16626.0], [83.3, 16661.0], [83.4, 16701.0], [83.5, 16732.0], [83.6, 16843.0], [83.7, 16865.0], [83.8, 16876.0], [83.9, 16882.0], [84.0, 16974.0], [84.1, 16976.0], [84.2, 17005.0], [84.3, 17005.0], [84.4, 17016.0], [84.5, 17030.0], [84.6, 17051.0], [84.7, 17063.0], [84.8, 17074.0], [84.9, 17101.0], [85.0, 17108.0], [85.1, 17130.0], [85.2, 17166.0], [85.3, 17193.0], [85.4, 17233.0], [85.5, 17250.0], [85.6, 17294.0], [85.7, 17322.0], [85.8, 17322.0], [85.9, 17342.0], [86.0, 17361.0], [86.1, 17403.0], [86.2, 17409.0], [86.3, 17409.0], [86.4, 17495.0], [86.5, 17557.0], [86.6, 17561.0], [86.7, 17570.0], [86.8, 17662.0], [86.9, 17666.0], [87.0, 17669.0], [87.1, 17675.0], [87.2, 17675.0], [87.3, 17687.0], [87.4, 17709.0], [87.5, 17736.0], [87.6, 17754.0], [87.7, 17761.0], [87.8, 17806.0], [87.9, 17811.0], [88.0, 17817.0], [88.1, 17818.0], [88.2, 17826.0], [88.3, 17846.0], [88.4, 17885.0], [88.5, 18037.0], [88.6, 18037.0], [88.7, 18325.0], [88.8, 19277.0], [88.9, 19301.0], [89.0, 19363.0], [89.1, 19412.0], [89.2, 19430.0], [89.3, 19677.0], [89.4, 19719.0], [89.5, 19865.0], [89.6, 19945.0], [89.7, 20063.0], [89.8, 20170.0], [89.9, 20244.0], [90.0, 20244.0], [90.1, 20270.0], [90.2, 20421.0], [90.3, 20458.0], [90.4, 20543.0], [90.5, 20674.0], [90.6, 20733.0], [90.7, 20749.0], [90.8, 20864.0], [90.9, 21046.0], [91.0, 21207.0], [91.1, 21269.0], [91.2, 21348.0], [91.3, 21457.0], [91.4, 21508.0], [91.5, 21508.0], [91.6, 21530.0], [91.7, 21586.0], [91.8, 21608.0], [91.9, 21677.0], [92.0, 21766.0], [92.1, 21775.0], [92.2, 21957.0], [92.3, 22006.0], [92.4, 22068.0], [92.5, 22093.0], [92.6, 22142.0], [92.7, 22163.0], [92.8, 22167.0], [92.9, 22167.0], [93.0, 22276.0], [93.1, 22314.0], [93.2, 22343.0], [93.3, 22351.0], [93.4, 22415.0], [93.5, 22424.0], [93.6, 22435.0], [93.7, 22445.0], [93.8, 22446.0], [93.9, 22460.0], [94.0, 22465.0], [94.1, 22556.0], [94.2, 22749.0], [94.3, 22749.0], [94.4, 22769.0], [94.5, 22802.0], [94.6, 22835.0], [94.7, 22849.0], [94.8, 22858.0], [94.9, 22889.0], [95.0, 22894.0], [95.1, 22910.0], [95.2, 23096.0], [95.3, 23223.0], [95.4, 23330.0], [95.5, 23486.0], [95.6, 23610.0], [95.7, 23639.0], [95.8, 23639.0], [95.9, 23779.0], [96.0, 23876.0], [96.1, 23936.0], [96.2, 23945.0], [96.3, 23975.0], [96.4, 23976.0], [96.5, 23989.0], [96.6, 24015.0], [96.7, 24044.0], [96.8, 24103.0], [96.9, 24112.0], [97.0, 24114.0], [97.1, 24123.0], [97.2, 24123.0], [97.3, 24204.0], [97.4, 24207.0], [97.5, 24339.0], [97.6, 24376.0], [97.7, 24411.0], [97.8, 24564.0], [97.9, 24907.0], [98.0, 24908.0], [98.1, 24914.0], [98.2, 25016.0], [98.3, 25063.0], [98.4, 25117.0], [98.5, 25612.0], [98.6, 25612.0], [98.7, 25730.0], [98.8, 25773.0], [98.9, 26117.0], [99.0, 26198.0], [99.1, 26299.0], [99.2, 26301.0], [99.3, 26345.0], [99.4, 26364.0], [99.5, 26377.0], [99.6, 26384.0], [99.7, 26407.0], [99.8, 26411.0], [99.9, 27680.0], [100.0, 27680.0]], "isOverall": false, "label": "GraphQL HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1300.0, "maxY": 24.0, "series": [{"data": [[1300.0, 2.0], [1400.0, 6.0], [1500.0, 19.0], [1600.0, 24.0], [1700.0, 9.0], [1800.0, 8.0], [1900.0, 12.0], [2000.0, 13.0], [2100.0, 11.0], [2300.0, 2.0], [2400.0, 4.0], [2500.0, 7.0], [2600.0, 4.0], [2700.0, 4.0], [2800.0, 12.0], [2900.0, 7.0], [3000.0, 7.0], [3100.0, 12.0], [3200.0, 11.0], [3300.0, 10.0], [3400.0, 10.0], [3500.0, 7.0], [3700.0, 6.0], [3600.0, 4.0], [3800.0, 5.0], [3900.0, 7.0], [4000.0, 6.0], [4300.0, 14.0], [4100.0, 3.0], [4200.0, 9.0], [4400.0, 13.0], [4500.0, 11.0], [4600.0, 7.0], [4800.0, 8.0], [4700.0, 12.0], [5100.0, 5.0], [4900.0, 5.0], [5000.0, 4.0], [5200.0, 4.0], [5300.0, 10.0], [5400.0, 17.0], [5500.0, 14.0], [5600.0, 6.0], [5800.0, 15.0], [5700.0, 10.0], [5900.0, 18.0], [6100.0, 14.0], [6000.0, 16.0], [6200.0, 5.0], [6300.0, 7.0], [6500.0, 12.0], [6600.0, 14.0], [6400.0, 9.0], [6900.0, 13.0], [6800.0, 11.0], [6700.0, 9.0], [7100.0, 15.0], [7000.0, 12.0], [7200.0, 9.0], [7400.0, 9.0], [7300.0, 11.0], [7600.0, 7.0], [7500.0, 8.0], [7700.0, 9.0], [7900.0, 12.0], [7800.0, 5.0], [8100.0, 5.0], [8000.0, 7.0], [8300.0, 4.0], [8400.0, 3.0], [8600.0, 2.0], [8200.0, 1.0], [8500.0, 5.0], [8700.0, 2.0], [9200.0, 3.0], [8800.0, 5.0], [8900.0, 3.0], [9000.0, 4.0], [9100.0, 2.0], [9300.0, 3.0], [9700.0, 3.0], [9400.0, 3.0], [9600.0, 4.0], [9500.0, 6.0], [9800.0, 3.0], [10000.0, 5.0], [10100.0, 7.0], [10200.0, 3.0], [9900.0, 1.0], [10500.0, 6.0], [10300.0, 4.0], [10600.0, 7.0], [10400.0, 4.0], [10800.0, 2.0], [10900.0, 1.0], [11600.0, 1.0], [11300.0, 1.0], [11900.0, 1.0], [12000.0, 1.0], [12700.0, 1.0], [12300.0, 1.0], [12500.0, 1.0], [14000.0, 1.0], [14200.0, 3.0], [14100.0, 1.0], [14300.0, 2.0], [14700.0, 1.0], [15300.0, 1.0], [15200.0, 1.0], [15800.0, 2.0], [15600.0, 2.0], [15700.0, 1.0], [16200.0, 1.0], [15900.0, 3.0], [16300.0, 5.0], [16100.0, 2.0], [17200.0, 3.0], [16400.0, 7.0], [16500.0, 4.0], [16600.0, 2.0], [16800.0, 4.0], [16700.0, 2.0], [17000.0, 6.0], [17100.0, 5.0], [16900.0, 2.0], [17300.0, 3.0], [17400.0, 4.0], [18000.0, 1.0], [18300.0, 1.0], [17600.0, 5.0], [17800.0, 7.0], [17700.0, 4.0], [17500.0, 3.0], [19200.0, 1.0], [19300.0, 2.0], [19400.0, 2.0], [19700.0, 1.0], [20100.0, 1.0], [20400.0, 2.0], [19900.0, 1.0], [19800.0, 1.0], [19600.0, 1.0], [20000.0, 1.0], [20200.0, 2.0], [20700.0, 2.0], [21500.0, 3.0], [21200.0, 2.0], [20800.0, 1.0], [21000.0, 1.0], [20500.0, 1.0], [20600.0, 1.0], [21300.0, 1.0], [21400.0, 1.0], [22400.0, 7.0], [21600.0, 2.0], [22200.0, 1.0], [22100.0, 3.0], [21700.0, 2.0], [22000.0, 3.0], [21900.0, 1.0], [22300.0, 3.0], [22500.0, 1.0], [23400.0, 1.0], [23000.0, 1.0], [23300.0, 1.0], [23200.0, 1.0], [22800.0, 6.0], [22900.0, 1.0], [22700.0, 2.0], [24400.0, 1.0], [24500.0, 1.0], [24000.0, 2.0], [24300.0, 2.0], [23600.0, 2.0], [24200.0, 2.0], [24100.0, 4.0], [23900.0, 5.0], [23800.0, 1.0], [23700.0, 1.0], [25000.0, 2.0], [24900.0, 3.0], [25100.0, 1.0], [25700.0, 2.0], [25600.0, 1.0], [26100.0, 2.0], [26300.0, 5.0], [26400.0, 2.0], [26200.0, 1.0], [27600.0, 1.0]], "isOverall": false, "label": "GraphQL HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 27600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 8.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 803.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 8.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 803.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 119.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 10.684210526315791, "minX": 1.70252508E12, "maxY": 140.08342480790327, "series": [{"data": [[1.70252508E12, 140.08342480790327], [1.70252514E12, 10.684210526315791]], "isOverall": false, "label": "Dashboard-200-ThreadStarter", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70252514E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1430.2, "minX": 1.0, "maxY": 27680.0, "series": [{"data": [[2.0, 17193.0], [7.0, 23225.6], [8.0, 24123.0], [9.0, 23975.0], [10.0, 23976.0], [11.0, 24015.0], [12.0, 23936.0], [15.0, 23954.0], [16.0, 24114.0], [17.0, 23945.0], [18.0, 23989.0], [19.0, 13083.5], [20.0, 6950.0], [21.0, 26411.0], [22.0, 26364.0], [23.0, 26299.0], [24.0, 26384.0], [25.0, 26198.0], [26.0, 26345.0], [27.0, 26407.0], [28.0, 26301.0], [29.0, 26117.0], [30.0, 1430.2], [31.0, 14313.5], [33.0, 14214.0], [34.0, 14185.0], [36.0, 14159.5], [39.0, 15111.666666666666], [41.0, 22910.0], [40.0, 22769.0], [43.0, 22894.0], [42.0, 22858.0], [44.0, 22889.0], [47.0, 19412.0], [46.0, 21139.5], [49.0, 16151.0], [48.0, 19363.0], [50.0, 4345.238095238095], [51.0, 19797.5], [53.0, 17101.0], [52.0, 22343.0], [55.0, 22446.0], [54.0, 17166.0], [56.0, 17063.0], [59.0, 22351.0], [58.0, 19469.0], [60.0, 5195.166666666666], [66.0, 17322.0], [65.0, 21885.6], [70.0, 2736.5272727272727], [69.0, 17030.0], [68.0, 17028.0], [75.0, 1615.0], [80.0, 1925.0624999999998], [82.0, 17885.0], [81.0, 18093.727272727276], [84.0, 17372.5], [90.0, 3643.5476190476197], [91.0, 18749.000000000004], [95.0, 17813.666666666668], [92.0, 17409.0], [99.0, 17826.0], [98.0, 21508.0], [97.0, 17846.0], [96.0, 24908.0], [100.0, 4789.578947368421], [103.0, 21348.0], [102.0, 25730.0], [101.0, 21457.0], [106.0, 17361.0], [105.0, 21766.0], [104.0, 17687.0], [110.0, 5776.50909090909], [111.0, 20674.0], [115.0, 17250.0], [114.0, 20543.0], [113.0, 19869.5], [120.0, 3657.3448275862065], [123.0, 19761.625], [125.0, 21957.0], [124.0, 21046.0], [130.0, 2940.3548387096776], [134.0, 18771.2], [129.0, 16904.25], [140.0, 5873.06896551724], [143.0, 24914.0], [142.0, 22142.0], [141.0, 21586.0], [139.0, 16430.0], [138.0, 16427.0], [137.0, 16433.0], [136.0, 16476.5], [150.0, 5815.318181818181], [149.0, 19887.0], [145.0, 27680.0], [144.0, 25117.0], [159.0, 25016.0], [158.0, 16389.0], [157.0, 16336.0], [156.0, 16469.0], [155.0, 24339.0], [154.0, 16158.0], [153.0, 16327.0], [152.0, 20645.0], [160.0, 5504.0], [167.0, 15871.5], [165.0, 15924.0], [164.0, 21842.8], [170.0, 6621.214285714285], [175.0, 23330.0], [174.0, 21677.0], [173.0, 23817.0], [171.0, 17867.0], [169.0, 15684.0], [168.0, 15756.0], [180.0, 8002.240000000002], [183.0, 16597.0], [181.0, 12563.0], [179.0, 21222.0], [176.0, 19677.0], [190.0, 6933.866666666667], [191.0, 20439.5], [189.0, 19945.0], [188.0, 21530.0], [187.0, 15909.5], [185.0, 16652.5], [197.0, 10525.0], [195.0, 10651.0], [194.0, 10851.0], [193.0, 20170.0], [192.0, 10988.0], [200.0, 7511.765432098765], [1.0, 17495.0]], "isOverall": false, "label": "GraphQL HTTP Request", "isController": false}, {"data": [[137.4333333333333, 8573.616129032254]], "isOverall": false, "label": "GraphQL HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 200.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1043.4166666666667, "minX": 1.70252508E12, "maxY": 368207.7166666667, "series": [{"data": [[1.70252508E12, 368207.7166666667], [1.70252514E12, 68020.45]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.70252508E12, 50029.083333333336], [1.70252514E12, 1043.4166666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70252514E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 8270.691547749722, "minX": 1.70252508E12, "maxY": 23098.052631578947, "series": [{"data": [[1.70252508E12, 8270.691547749722], [1.70252514E12, 23098.052631578947]], "isOverall": false, "label": "GraphQL HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70252514E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 7324.635565312837, "minX": 1.70252508E12, "maxY": 19241.368421052626, "series": [{"data": [[1.70252508E12, 7324.635565312837], [1.70252514E12, 19241.368421052626]], "isOverall": false, "label": "GraphQL HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70252514E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1976.3874862788152, "minX": 1.70252508E12, "maxY": 10960.421052631578, "series": [{"data": [[1.70252508E12, 1976.3874862788152], [1.70252514E12, 10960.421052631578]], "isOverall": false, "label": "GraphQL HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70252514E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1365.0, "minX": 1.70252508E12, "maxY": 19430.0, "series": [{"data": [[1.70252508E12, 19430.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.70252508E12, 14301.400000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.70252508E12, 17816.28]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.70252508E12, 17009.4]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.70252508E12, 1365.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.70252508E12, 5941.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70252508E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2055.0, "minX": 1.0, "maxY": 26354.5, "series": [{"data": [[33.0, 6857.5], [34.0, 6539.0], [3.0, 3837.0], [4.0, 11954.0], [5.0, 2055.0], [7.0, 7097.0], [8.0, 6848.5], [9.0, 2797.0], [10.0, 14297.5], [11.0, 10126.0], [12.0, 16428.5], [13.0, 6428.5], [14.0, 8724.5], [15.0, 6321.0], [1.0, 7677.0], [17.0, 5535.0], [18.0, 9562.0], [19.0, 2553.5], [20.0, 6907.0], [21.0, 2368.0], [22.0, 17616.0], [23.0, 7793.0], [24.0, 3391.5], [25.0, 2938.0], [26.0, 8588.0], [27.0, 4989.0], [28.0, 6383.0], [31.0, 4264.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[8.0, 21473.0], [33.0, 10636.0], [2.0, 18657.0], [34.0, 10117.0], [9.0, 20421.0], [10.0, 26354.5], [11.0, 22889.0], [3.0, 25117.0], [12.0, 21981.5], [14.0, 23208.0], [15.0, 21178.5], [1.0, 17495.0], [4.0, 19945.0], [18.0, 22435.0], [20.0, 11659.0], [5.0, 21035.5], [22.0, 25337.5], [23.0, 14336.0], [26.0, 24191.5], [28.0, 9896.0], [7.0, 23989.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 34.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 2054.0, "minX": 1.0, "maxY": 20114.0, "series": [{"data": [[33.0, 6857.5], [34.0, 6539.0], [3.0, 3837.0], [4.0, 11954.0], [5.0, 2054.0], [7.0, 7097.0], [8.0, 6848.5], [9.0, 2797.0], [10.0, 14297.5], [11.0, 10126.0], [12.0, 16427.5], [13.0, 6428.5], [14.0, 8724.5], [15.0, 6321.0], [1.0, 7677.0], [17.0, 5535.0], [18.0, 9562.0], [19.0, 2553.5], [20.0, 6907.0], [21.0, 2368.0], [22.0, 17616.0], [23.0, 7792.0], [24.0, 3391.5], [25.0, 2938.0], [26.0, 8588.0], [27.0, 4989.0], [28.0, 6383.0], [31.0, 4264.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[8.0, 11542.5], [33.0, 8855.0], [2.0, 10523.0], [34.0, 8275.0], [9.0, 11031.0], [10.0, 19142.0], [11.0, 18878.0], [3.0, 14598.0], [12.0, 11659.0], [14.0, 11328.5], [15.0, 11194.5], [1.0, 10012.0], [4.0, 10046.0], [18.0, 14178.0], [20.0, 10692.0], [5.0, 11090.5], [22.0, 12552.0], [23.0, 9918.0], [26.0, 13912.5], [28.0, 8951.0], [7.0, 20114.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 34.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.16666666666666666, "minX": 1.70252502E12, "maxY": 15.333333333333334, "series": [{"data": [[1.70252508E12, 15.333333333333334], [1.70252502E12, 0.16666666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70252508E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.31666666666666665, "minX": 1.70252508E12, "maxY": 13.516666666666667, "series": [{"data": [[1.70252508E12, 13.516666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.70252508E12, 1.6666666666666667], [1.70252514E12, 0.31666666666666665]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70252514E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.31666666666666665, "minX": 1.70252508E12, "maxY": 13.516666666666667, "series": [{"data": [[1.70252508E12, 1.6666666666666667], [1.70252514E12, 0.31666666666666665]], "isOverall": false, "label": "GraphQL HTTP Request-failure", "isController": false}, {"data": [[1.70252508E12, 13.516666666666667]], "isOverall": false, "label": "GraphQL HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70252514E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.31666666666666665, "minX": 1.70252508E12, "maxY": 13.516666666666667, "series": [{"data": [[1.70252508E12, 13.516666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.70252508E12, 1.6666666666666667], [1.70252514E12, 0.31666666666666665]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70252514E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

